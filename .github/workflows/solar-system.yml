name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'
env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: superuser
  MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}
jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod 
            ports:
             - 27017:27017
        env:
            MONGO_URI: 'mongodb://mongo-db:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password    
        runs-on: ubuntu-latest
        container:        #added
         image: 'node:20' #added
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
          

        #- name: Setup NodeJS Version
        #  uses: actions/setup-node@v4
        #  with:
        #   node-version: 20
    
        - name: Cache NPM dependencies
          uses: actions/cache@v4
          with:
            path: ~/.npm
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          run: npm test
          
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result
            path: test-results.xml
          
    code-coverage:
        name: code-coverage
        container: 
          image: node:18
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod 
            options: 
              --name mongo
        env:
            MONGO_URI: 'mongodb://mongo:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password    
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

       # - name: Setup NodeJS Version
       #   uses: actions/setup-node@v4
       #   with:
       #     node-version: 18
        - name: Install Dependencies
          run: npm install

        - name: Run Code Coverage Command
          continue-on-error: true
          run: npm run code-coverage

    
        - name: Code-Coverage-Result
          
          uses: actions/upload-artifact@v4
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5

    docker:
        name: Containerization
        needs: [unit-testing, code-coverage]
        permissions: 
          packages: write
      
        runs-on: ubuntu-latest
        steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Dockerhub Login
          uses: docker/login-action@v2.2.0
          with:
            username: ${{ vars.DOCKERHUB_USERNAME}}
            password: ${{ secrets.DOCKERHUB_PASSWORD}}
        
        - name: GitHub Container Registry Login 
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner}}
            password: ${{ secrets.GITHUB_TOKEN}}    

        - name: Docker Build For Testing
          uses: docker/build-push-action@v6
          with:
            context: .
            push: true
            tags: |
              ghcr.io/saagar4/solar-system:${{ github.sha }}
              saagar22/solar-system:${{ github.sha }}

        - name: Docker Image Test
          run: |
            docker images

            docker run --name solar-system-app -d \
              -p 3000:3000 \
              -e MONGO_URI=$MONGO_URI \
              -e MONGO_USERNAME=$MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              ghcr.io/saagar4/solar-system:${{ github.sha }}

            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Testing Image URL using wget
            wget -q -O - 127.0.0.1:3000/live | grep live


        - name: Container Registry Push
          uses: docker/build-push-action@v4
          with:
              context: .
              push: true
              tags: |
                ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
                ghcr.io/${{ github.repository_owner}}/solar-system:${{ github.sha }}

    dev-deploy:
      needs: docker
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4

        - name: Install kubectl CLI
          uses: azure/setup-kubectl@v3
          with:
            version: 'v1.26.0'

        - name: Set Kubeconfig file
          uses: azure/k8s-set-context@v3
          with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}

        - name: Fetch Kubernetes Cluster Details
          run: |
           kubectl version --short
           echo
           kubectl get nodes

        - name: Save Nginx Ingress Controlle as a GITHUB Environment Variable
          run: |
            echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> "$GITHUB_ENV"

        - name: Replace Token in Manifest files
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["kubernetes/development/*.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars. REPLICAS }}
            IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            INGRESS_IP: ${{env.INGRESS_IP}}

        - name: check files
          run: |
            cat kubernetes/development/ *. yaml


